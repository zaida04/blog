---
import { Image } from "astro:assets";
import MyFace from "../static/imgs/my_face.png";
import { projects_data } from "../static/data/projects";
import { competitions_data } from "../static/data/competitions";
import { wakatime_data } from "../static/data/wakatime";

import PageLayout from "../components/layouts/PageLayout.astro";
import ProjectCard from "../components/project/ProjectCard";
import CodingTime from "../components/coding_time/CodingTime.astro";
import BlogCard from "../components/blog/BlogCard";
import { Github, Mail } from "lucide-react";
import CompetitionCard from "../components/competition/CompetitionCard";
import { getCollection } from "astro:content";
import Link from "../components/Link";
import { colors } from "../utils/links";

const project_sections: Record<string, keyof typeof projects_data> = {
    "Websites & Fullstack": "sites",
    "Backend & Bots": "backends",
    Libraries: "libraries",
};

const allPosts = await getCollection("posts");
---

<PageLayout title="Zaid's Site">
    <div id="home" class="flex flex-col md:flex-row">
        <div class="flex flex-col gap-8 pr-8">
            <h1>Hello, I'm Zaid.</h1>
            <div class="flex flex-col font-normal gap-4">
                <p class="leading-loose">
                    I build full-stack stuffâ„¢ using
                    <Link
                        href={colors.node.url}
                        className={colors.node.color}
                        text="Node.js"
                    />,
                    <Link
                        href={colors.javascript.url}
                        className={colors.javascript.color}
                        text="JavaScript"
                    />,
                    <Link
                        href={colors.typescript.url}
                        className={colors.typescript.color}
                        text="TypeScript"
                    />, and
                    <Link
                        href={colors.python.url}
                        className={colors.python.color}
                        text="Python"
                    />. I'm familiar with databases like
                    <Link
                        href={colors.pg.url}
                        className={colors.pg.color}
                        text="PostgreSQL"
                    /> and
                    <Link
                        href={colors.mongo.url}
                        className={colors.mongo.color}
                        text="MongoDB"
                    />.
                </p>

                <p class="leading-loose">
                    I'm currently really interested in learning lower-level
                    languages such as
                    <Link
                        href={colors.rust.url}
                        className={colors.rust.color}
                        text="Rust"
                    /> and
                    <Link
                        href={colors.elixir.url}
                        className={colors.elixir.color}
                        text="Elixir"
                    />.
                </p>

                <p class="leading-loose">
                    I'm the founder of
                    <Link
                        href={colors.yoki.url}
                        className={colors.yoki.color}
                        text="Yoki"
                    />. On the side, I am a Community Manager for
                    <Link
                        href={colors.adobe.url}
                        className={colors.adobe.color}
                        text="Adobe Creative Career"
                    />. Previously a Software Engineer Intern at
                    <Link
                        href={colors.mirage.url}
                        className={colors.mirage.color}
                        text="Mirage Security"
                    /> &
                    <Link
                        href={colors.fiveable.url}
                        className={colors.fiveable.color}
                        text="Fiveable"
                    />.
                </p>

                <div>
                    <h3>Coding Stats</h3>
                    {
                        Object.keys(wakatime_data).map((year) => (
                            <CodingTime
                                year={year}
                                {...wakatime_data[
                                    year as keyof typeof wakatime_data
                                ]}
                            />
                        ))
                    }
                </div>

                <div class="flex flex-row gap-2">
                    <Github />
                    <Mail />
                </div>
            </div>
        </div>

        <div
            class="bg-slate-800/50 border-slate-800/50 border-4 h-fit p-2 rounded-xl"
        >
            <Image
                src={MyFace}
                alt="Zaid's Face"
                width={500}
                class="rounded-xl"
            />
        </div>
    </div>

    <div id="projects" class="flex flex-col gap-16">
        <div class="flex flex-col gap-6">
            <h2>Featured Projects</h2>
            {
                Object.entries(project_sections).map(
                    ([title, json_section]) => (
                        <>
                            <h3>{title}</h3>
                            <div class="flex flex-row gap-4 overflow-x-auto pb-4">
                                {projects_data[json_section].map((project) => (
                                    <ProjectCard {...project} />
                                ))}
                            </div>
                        </>
                    ),
                )
            }
        </div>
    </div>

    <div id="competitions">
        <h2>Competitions</h2>
        <div class="flex flex-row overflow-x-auto pb-4 gap-4 mt-4">
            {
                competitions_data.map((competition) => (
                    <CompetitionCard {...competition} />
                ))
            }
        </div>
    </div>

    <div id="blog">
        <h2>Blog</h2>
        <div class="flex flex-col gap-10 mt-8">
            {
                allPosts
                    .sort((a, b) => b.data.publishedAt - a.data.publishedAt)
                    .map((post) => <BlogCard {...post} />)
            }
        </div>
    </div>
</PageLayout>
